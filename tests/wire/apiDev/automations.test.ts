/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { IttybitClient } from "../../../src/Client";

describe("Automations", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new IttybitClient({ apiKey: "test", version: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "auto_abcdefgh1234",
                name: "My Example Automation",
                description: "This workflow will run whenever new media is created.",
                trigger: { kind: "event", event: "media.created" },
                workflow: [
                    { kind: "description" },
                    { kind: "image", ref: "thumbnail" },
                    {
                        kind: "conditions",
                        conditions: [{ prop: "kind", value: "video" }],
                        next: [{ kind: "subtitle", ref: "subtitle" }],
                    },
                ],
                status: "active",
                created: "2025-01-01T01:23:45Z",
                updated: "2025-01-01T01:23:45Z",
            },
            {
                id: "id",
                name: "name",
                description: "description",
                trigger: { kind: "event", event: "media.created" },
                workflow: [{ kind: "video" }],
                status: "active",
                created: "2024-01-15T09:30:00Z",
                updated: "2024-01-15T09:30:00Z",
            },
        ];
        server
            .mockEndpoint()
            .get("/automations")
            .header("Accept-Version", "2025-08-20")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.apiDev.automations.list();
        expect(response).toEqual([
            {
                id: "auto_abcdefgh1234",
                name: "My Example Automation",
                description: "This workflow will run whenever new media is created.",
                trigger: {
                    kind: "event",
                    event: "media.created",
                },
                workflow: [
                    {
                        kind: "description",
                    },
                    {
                        kind: "image",
                        ref: "thumbnail",
                    },
                    {
                        kind: "conditions",
                        conditions: [
                            {
                                prop: "kind",
                                value: "video",
                            },
                        ],
                        next: [
                            {
                                kind: "subtitle",
                                ref: "subtitle",
                            },
                        ],
                    },
                ],
                status: "active",
                created: "2025-01-01T01:23:45Z",
                updated: "2025-01-01T01:23:45Z",
            },
            {
                id: "id",
                name: "name",
                description: "description",
                trigger: {
                    kind: "event",
                    event: "media.created",
                },
                workflow: [
                    {
                        kind: "video",
                    },
                ],
                status: "active",
                created: "2024-01-15T09:30:00Z",
                updated: "2024-01-15T09:30:00Z",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new IttybitClient({ apiKey: "test", version: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "My Example Automation",
            description: "This workflow will run whenever new media is created.",
            trigger: { kind: "event", event: "media.created" },
            workflow: [
                { kind: "description" },
                { kind: "image", ref: "thumbnail" },
                { kind: "video", next: [{ kind: "subtitles", ref: "subtitles" }] },
            ],
            status: "active",
        };
        const rawResponseBody = {
            id: "auto_abcdefgh1234",
            name: "My Example Automation",
            description: "This workflow will run whenever new media is created.",
            trigger: { kind: "event", event: "media.created" },
            workflow: [
                { kind: "description", ref: "ref", next: [{}] },
                { kind: "image", ref: "thumbnail", next: [{}] },
                {
                    kind: "conditions",
                    conditions: [{ prop: "kind", value: "video" }],
                    next: [{ kind: "subtitle", ref: "subtitle" }],
                },
            ],
            status: "active",
            created: "2025-01-01T01:23:45Z",
            updated: "2025-01-01T01:23:45Z",
        };
        server
            .mockEndpoint()
            .post("/automations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.apiDev.automations.create({
            name: "My Example Automation",
            description: "This workflow will run whenever new media is created.",
            trigger: {
                kind: "event",
                event: "media.created",
            },
            workflow: [
                {
                    kind: "description",
                },
                {
                    kind: "image",
                    ref: "thumbnail",
                },
                {
                    kind: "video",
                    next: [
                        {
                            kind: "subtitles",
                            ref: "subtitles",
                        },
                    ],
                },
            ],
            status: "active",
        });
        expect(response).toEqual({
            id: "auto_abcdefgh1234",
            name: "My Example Automation",
            description: "This workflow will run whenever new media is created.",
            trigger: {
                kind: "event",
                event: "media.created",
            },
            workflow: [
                {
                    kind: "description",
                    ref: "ref",
                    next: [{}],
                },
                {
                    kind: "image",
                    ref: "thumbnail",
                    next: [{}],
                },
                {
                    kind: "conditions",
                    conditions: [
                        {
                            prop: "kind",
                            value: "video",
                        },
                    ],
                    next: [
                        {
                            kind: "subtitle",
                            ref: "subtitle",
                        },
                    ],
                },
            ],
            status: "active",
            created: "2025-01-01T01:23:45Z",
            updated: "2025-01-01T01:23:45Z",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new IttybitClient({ apiKey: "test", version: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "auto_abcdefgh1234",
            name: "My Example Automation",
            description: "This workflow will run whenever new media is created.",
            trigger: { kind: "event", event: "media.created" },
            workflow: [
                { kind: "description", ref: "ref", next: [{}] },
                { kind: "image", ref: "thumbnail", next: [{}] },
                {
                    kind: "conditions",
                    conditions: [{ prop: "kind", value: "video" }],
                    next: [{ kind: "subtitle", ref: "subtitle" }],
                },
            ],
            status: "active",
            created: "2025-01-01T01:23:45Z",
            updated: "2025-01-01T01:23:45Z",
        };
        server
            .mockEndpoint()
            .get("/automations/auto_abcdefgh1234")
            .header("Accept-Version", "2025-08-20")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.apiDev.automations.get("auto_abcdefgh1234");
        expect(response).toEqual({
            id: "auto_abcdefgh1234",
            name: "My Example Automation",
            description: "This workflow will run whenever new media is created.",
            trigger: {
                kind: "event",
                event: "media.created",
            },
            workflow: [
                {
                    kind: "description",
                    ref: "ref",
                    next: [{}],
                },
                {
                    kind: "image",
                    ref: "thumbnail",
                    next: [{}],
                },
                {
                    kind: "conditions",
                    conditions: [
                        {
                            prop: "kind",
                            value: "video",
                        },
                    ],
                    next: [
                        {
                            kind: "subtitle",
                            ref: "subtitle",
                        },
                    ],
                },
            ],
            status: "active",
            created: "2025-01-01T01:23:45Z",
            updated: "2025-01-01T01:23:45Z",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new IttybitClient({ apiKey: "test", version: "test", environment: server.baseUrl });

        const rawResponseBody = { message: "Automation auto_abcdefgh1234 deleted" };
        server
            .mockEndpoint()
            .delete("/automations/auto_abcdefgh1234")
            .header("Accept-Version", "2025-08-20")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.apiDev.automations.delete("auto_abcdefgh1234");
        expect(response).toEqual({
            message: "Automation auto_abcdefgh1234 deleted",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new IttybitClient({ apiKey: "test", version: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "My Updated Automation",
            workflow: [
                { kind: "nsfw" },
                { kind: "description" },
                { kind: "image", ref: "big_thumbnail" },
                { kind: "video", next: [{ kind: "subtitle", ref: "subtitle" }] },
            ],
            status: "active",
        };
        const rawResponseBody = {
            id: "auto_abcdefgh1234",
            name: "My Updated Automation",
            description: "This workflow will run whenever new media is created.",
            trigger: { kind: "event", event: "media.created" },
            workflow: [
                { kind: "nsfw", ref: "ref", next: [{}] },
                { kind: "description", ref: "ref", next: [{}] },
                { kind: "image", ref: "big_thumbnail", next: [{}] },
                {
                    kind: "conditions",
                    conditions: [{ prop: "kind", value: "video" }],
                    next: [{ kind: "subtitle", ref: "subtitle" }],
                },
            ],
            status: "active",
            created: "2025-01-01T01:23:45Z",
            updated: "2025-01-02T01:23:45Z",
        };
        server
            .mockEndpoint()
            .patch("/automations/auto_abcdefgh1234")
            .header("Accept-Version", "2025-08-20")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.apiDev.automations.update("auto_abcdefgh1234", {
            name: "My Updated Automation",
            workflow: [
                {
                    kind: "nsfw",
                },
                {
                    kind: "description",
                },
                {
                    kind: "image",
                    ref: "big_thumbnail",
                },
                {
                    kind: "video",
                    next: [
                        {
                            kind: "subtitle",
                            ref: "subtitle",
                        },
                    ],
                },
            ],
            status: "active",
        });
        expect(response).toEqual({
            id: "auto_abcdefgh1234",
            name: "My Updated Automation",
            description: "This workflow will run whenever new media is created.",
            trigger: {
                kind: "event",
                event: "media.created",
            },
            workflow: [
                {
                    kind: "nsfw",
                    ref: "ref",
                    next: [{}],
                },
                {
                    kind: "description",
                    ref: "ref",
                    next: [{}],
                },
                {
                    kind: "image",
                    ref: "big_thumbnail",
                    next: [{}],
                },
                {
                    kind: "conditions",
                    conditions: [
                        {
                            prop: "kind",
                            value: "video",
                        },
                    ],
                    next: [
                        {
                            kind: "subtitle",
                            ref: "subtitle",
                        },
                    ],
                },
            ],
            status: "active",
            created: "2025-01-01T01:23:45Z",
            updated: "2025-01-02T01:23:45Z",
        });
    });
});
