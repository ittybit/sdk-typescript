/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface AutomationListResponse {
    meta?: AutomationListResponse.Meta;
    data?: AutomationListResponse.Data.Item[];
    error?: AutomationListResponse.Error_;
    links?: AutomationListResponse.Links;
}

export namespace AutomationListResponse {
    export interface Meta {
        request_id?: string;
        org_id?: string;
        project_id?: string;
        version?: string;
        type?: Meta.Type;
        limit?: number;
        total?: number;
        page?: number;
        pages?: number;
    }

    export namespace Meta {
        export type Type = "object" | "list";
        export const Type = {
            Object: "object",
            List: "list",
        } as const;
    }

    export type Data = Data.Item[];

    export namespace Data {
        export interface Item {
            id: string;
            name?: string;
            description?: string;
            trigger: Item.Trigger;
            workflow: Item.Workflow.Item[];
            status: Item.Status;
            created: string;
            updated: string;
        }

        export namespace Item {
            export interface Trigger {
                kind: "event";
                event: "media.created";
            }

            export type Workflow = Workflow.Item[];

            export namespace Workflow {
                export type Item =
                    | {
                          kind:
                              | "video"
                              | "image"
                              | "audio"
                              | "chapters"
                              | "subtitles"
                              | "thumbnails"
                              | "nsfw"
                              | "speech"
                              | "description"
                              | "outline"
                              | "prompt"
                              | "http";
                          ref?: string | undefined;
                          next?:
                              | {
                                    kind?: string | undefined;
                                    ref?: string | undefined;
                                }[]
                              | undefined;
                      }
                    | {
                          kind: "conditions";
                          conditions: {
                              prop?: string | undefined;
                              value?: string | undefined;
                          }[];
                          next?:
                              | {
                                    kind?: string | undefined;
                                    ref?: string | undefined;
                                }[]
                              | undefined;
                      };
            }

            export type Status = "active" | "paused";
            export const Status = {
                Active: "active",
                Paused: "paused",
            } as const;
        }
    }

    export interface Error_ {
        message?: string;
    }

    export interface Links {
        self?: string;
        first?: string;
        next?: string;
        prev?: string;
        last?: string;
    }
}
