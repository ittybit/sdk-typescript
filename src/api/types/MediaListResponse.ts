/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface MediaListResponse {
    meta?: MediaListResponse.Meta;
    data?: MediaListResponse.Data.Item[];
    error?: MediaListResponse.Error_;
    links?: MediaListResponse.Links;
}

export namespace MediaListResponse {
    export interface Meta {
        request_id?: string;
        org_id?: string;
        project_id?: string;
        version?: string;
        type?: Meta.Type;
        limit?: number;
        total?: number;
        page?: number;
        pages?: number;
    }

    export namespace Meta {
        export type Type = "object" | "list";
        export const Type = {
            Object: "object",
            List: "list",
        } as const;
    }

    export type Data = Data.Item[];

    export namespace Data {
        export interface Item {
            id: string;
            object: string;
            kind?: Item.Kind;
            title?: string;
            alt?: string;
            width?: number;
            height?: number;
            duration?: number;
            files: Item.Files.Item[];
            urls: Record<string, unknown>;
            background?: string;
            metadata?: Record<string, unknown>;
            created: string;
            updated: string;
        }

        export namespace Item {
            export type Kind = "video" | "image" | "audio";
            export const Kind = {
                Video: "video",
                Image: "image",
                Audio: "audio",
            } as const;
            export type Files = Files.Item[];

            export namespace Files {
                export interface Item {
                    id: string;
                    object: Item.Object_;
                    kind: Item.Kind;
                    type: string;
                    codec?: string;
                    container?: string;
                    width?: number;
                    height?: number;
                    orientation?: Item.Orientation;
                    rotation?: number;
                    transparency?: boolean;
                    frames?: number;
                    duration?: number;
                    fps?: number;
                    filesize: number;
                    bitrate?: number;
                    ref?: string;
                    folder?: string;
                    filename?: string;
                    url: string;
                    metadata?: Record<string, unknown>;
                    original?: boolean;
                    created: string;
                    updated: string;
                    status: Item.Status;
                }

                export namespace Item {
                    export type Object_ = "source" | "track" | "intelligence";
                    export const Object_ = {
                        Source: "source",
                        Track: "track",
                        Intelligence: "intelligence",
                    } as const;
                    export type Kind = "video" | "image" | "audio";
                    export const Kind = {
                        Video: "video",
                        Image: "image",
                        Audio: "audio",
                    } as const;
                    export type Orientation = "landscape" | "portrait" | "square";
                    export const Orientation = {
                        Landscape: "landscape",
                        Portrait: "portrait",
                        Square: "square",
                    } as const;
                    export type Status = "waiting" | "processing" | "ready" | "failed";
                    export const Status = {
                        Waiting: "waiting",
                        Processing: "processing",
                        Ready: "ready",
                        Failed: "failed",
                    } as const;
                }
            }
        }
    }

    export interface Error_ {
        message?: string;
    }

    export interface Links {
        self?: string;
        first?: string;
        next?: string;
        prev?: string;
        last?: string;
    }
}
