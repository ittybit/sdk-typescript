/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface AutomationsGetResponse {
    meta?: AutomationsGetResponse.Meta;
    data?: AutomationsGetResponse.Data;
    error?: AutomationsGetResponse.Error_;
    links?: AutomationsGetResponse.Links;
}

export namespace AutomationsGetResponse {
    export interface Meta {
        request_id?: string;
        org_id?: string;
        project_id?: string;
        version?: string;
        type?: Meta.Type;
    }

    export namespace Meta {
        export type Type = "object" | "list";
        export const Type = {
            Object: "object",
            List: "list",
        } as const;
    }

    export interface Data {
        id: string;
        name?: string;
        description?: string;
        trigger: Data.Trigger;
        workflow: Data.Workflow.Item[];
        status: Data.Status;
        created: string;
        updated: string;
    }

    export namespace Data {
        export interface Trigger {
            kind: "event";
            event: "media.created";
        }

        export type Workflow = Workflow.Item[];

        export namespace Workflow {
            export type Item =
                | {
                      kind:
                          | "video"
                          | "image"
                          | "audio"
                          | "chapters"
                          | "subtitles"
                          | "thumbnails"
                          | "nsfw"
                          | "speech"
                          | "description"
                          | "outline"
                          | "prompt"
                          | "http";
                      ref?: string | undefined;
                      next?:
                          | {
                                kind?: string | undefined;
                                ref?: string | undefined;
                            }[]
                          | undefined;
                  }
                | {
                      kind: "conditions";
                      conditions: {
                          prop?: string | undefined;
                          value?: string | undefined;
                      }[];
                      next?:
                          | {
                                kind?: string | undefined;
                                ref?: string | undefined;
                            }[]
                          | undefined;
                  };
        }

        export type Status = "active" | "paused";
        export const Status = {
            Active: "active",
            Paused: "paused",
        } as const;
    }

    export interface Error_ {
        message?: string;
    }

    export interface Links {
        self?: string;
        parent?: string;
    }
}
